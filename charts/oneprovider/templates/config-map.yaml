apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "fullname" . }}-config
  labels:
    app: {{ template "fullname" . }}
    chart: {{ .Chart.Name }}
    release: {{ .Release.Name  }}
    heritage: {{ .Release.Service }}
    onedata-service: "oneprovider"
  annotations:
    version: "{{ .Chart.Version }}"
data:
  ONEPROVIDER_CONFIG: |-
    cluster:
      domainName: "{{ template "service_url" . }}"
      nodes:
        {{- $r := . -}}
        {{- range $i := until (int (.Values.oneprovider_nodes_count)) }}
        n{{ $i }}: 
          hostname: {{ template "fullname" $r }}-{{ $i }}
        {{- end }}
      managers:
        mainNode: n{{ sub (.Values.oneprovider_nodes_count) 1 }} 
        nodes:
    {{- with .Values.cluster_config.managers }}
        {{- range $i := . }}
          - n{{ $i }}
        {{- end }}
    {{- else }}
        {{- range $i := until (int ($r.Values.oneprovider_nodes_count)) }}
          - n{{ $i }}
        {{- end }}
    {{- end }}
      workers:
        nodes:
    {{- with .Values.cluster_config.workers }}
        {{- range $i := . }}
          - n{{ $i }}
        {{- end }}
    {{- else }}
        {{- range $i := until (int ($r.Values.oneprovider_nodes_count)) }}
          - n{{ $i }}
        {{- end }}
    {{- end }}
      databases:
        nodes:
    {{- with .Values.cluster_config.databases }}
        {{- range $i := . }}
          - n{{ $i }}
        {{- end }}
    {{- else }}
        {{- range $i := until (int ($r.Values.oneprovider_nodes_count)) }}
          - n{{ $i }}
        {{- end }}
    {{- end }}
      {{- if or (eq (int .Values.oneprovider_nodes_count) 1) (or (index .Values "external-storages") (or (index .Values "volume-s3" "enabled")) (or (index .Values "volume-ceph" "enabled") (or (index .Values "volume-gluster" "enabled") (index .Values "volume-swift" "enabled")))) }}
      storages:
      {{- end }}
      {{- if and (index .Values "posix" "enabled") (eq (int .Values.oneprovider_nodes_count) 1) }}
        posix:
          type: posix
          mountPoint: /volumes/storage
        {{- if (index .Values "posix" "luma-enabled") }}
          lumaEnabled: {{ .Values.luma.enabled }}
          lumaUrl: {{ template "luma_name" . }}:5000
          lumaCacheTimeout: {{ .Values.luma.lumaCacheTimeout }}
          lumaApiKey: {{ .Values.luma.lumaApiKey }}
        {{- end }}
      {{- end }}
      {{- if (index .Values "volume-nfs" "enabled") }}
        nfs:
          type: posix
          mountPoint: {{ index .Values "volume-nfs" "container_mount_path" }}
        {{- if (index .Values "volume-nfs" "luma-enabled") }}
          lumaEnabled: {{ .Values.luma.enabled }}
          lumaUrl: {{ template "luma_name" . }}:5000
          lumaCacheTimeout: {{ .Values.luma.lumaCacheTimeout }}
          lumaApiKey: {{ .Values.luma.lumaApiKey }}
        {{- end }}
      {{- end }}
      {{- if (index .Values "volume-s3" "enabled") }}
        s3:
          type: s3
          hostname: {{ template "volume-s3_name" . }}:8000
          bucketName: {{ index .Values "volume-s3" "bucketName" }}
          accessKey: {{ index .Values "volume-s3" "key_id" }}
          secretKey: {{ index .Values "volume-s3" "access_key" }}
          insecure: {{ index .Values "volume-s3" "insecure" }}
        {{- if (index .Values "volume-s3" "luma-enabled") }}
          lumaEnabled: {{ .Values.luma.enabled }}
          lumaUrl: {{ template "luma_name" . }}:5000
          lumaCacheTimeout: {{ .Values.luma.lumaCacheTimeout }}
          lumaApiKey: {{ .Values.luma.lumaApiKey }}
        {{- end }}
      {{- end }}
      {{- if (index .Values "volume-ceph" "enabled") }}
        ceph:
          type: ceph
          username: {{ index .Values "volume-ceph" "username" }}
          key: {{ index .Values "volume-ceph" "key" }}
          monitorHostname: {{ template "volume-ceph_name" . }}
          clusterName: {{ index .Values "volume-ceph" "cluster_name" }}
          poolName: {{ index .Values "volume-ceph" "pool_name" }}
          insecure: {{ index .Values "volume-ceph" "insecure" }}
        {{- if (index .Values "volume-ceph" "luma-enabled") }}
          lumaEnabled: {{ .Values.luma.enabled }}
          lumaUrl: {{ template "luma_name" . }}:5000
          lumaCacheTimeout: {{ .Values.luma.lumaCacheTimeout }}
          lumaApiKey: {{ .Values.luma.lumaApiKey }}
        {{- end }}
      {{- end }}
      {{- if (index .Values "volume-gluster" "enabled") }}
        gluster:
          type: glusterfs
          hostname: {{ template "volume-gluster_name" . }}
          volume: {{ index .Values "volume-gluster" "volumeName" }}
          transport: tcp
          insecure: {{ index .Values "volume-gluster" "insecure" }}
        {{- if (index .Values "volume-gluster" "luma-enabled") }}
          lumaEnabled: {{ .Values.luma.enabled }}
          lumaUrl: {{ template "luma_name" . }}:5000
          lumaCacheTimeout: {{ .Values.luma.lumaCacheTimeout }}
          lumaApiKey: {{ .Values.luma.lumaApiKey }}
        {{- end }}
      {{- end }}
      {{- if (index .Values "volume-swift" "enabled") }}
        swift:
          type: swift
          authUrl: http://{{ template "volume-swift_name" . }}:5000/v2.0/tokens
          tenantName: {{ index .Values "volume-swift" "tenantName" }}
          containerName: {{ index .Values "volume-swift" "containerName" }}
          username: {{ index .Values "volume-swift" "username" }}
          password: {{ index .Values "volume-swift" "password" }}
          insecure: {{ index .Values "volume-swift" "insecure" }}
        {{- if (index .Values "volume-swift" "luma-enabled") }}
          lumaEnabled: {{ .Values.luma.enabled }}
          lumaUrl: {{ template "luma_name" . }}:5000
          lumaCacheTimeout: {{ .Values.luma.lumaCacheTimeout }}
          lumaApiKey: {{ .Values.luma.lumaApiKey }}
        {{- end }}
      {{- end }}
      {{- if (index .Values "external-storages") }}
{{ toYaml (index .Values "external-storages") | indent 8 }}
      {{- end }}
    oneprovider:
      register: true
      {{ if .Values.name -}}
      name: {{ .Values.name }}
      {{- else -}}
      name: {{ template "fullname" . }}
      {{- end }}
      # Depending on Onedata version, one of 2 keys below will be used
      redirectionPoint: https://{{ template "service_url" . }}
      domain: {{ template "service_url" . }} # OR IP ADDRESS
      # Subdomain feature is currently not supported in k8s
      subdomainDelegation: false
      adminEmail: {{ .Values.adminEmail }}
      geoLatitude: {{ .Values.geoLatitude }}
      geoLongitude: {{ .Values.geoLongitude }}
    # TODO: make it possible for onedata services to communicate using 
    # system configured DNS. this will allow to put here just service name
    # instead of FQDN
    onezone:
      domainName: {{ template "onezone_service_url" . }}
    {{- if or .Values.onepanel_admin_users .Values.onepanel_users }}
    onepanel:
      users:
        {{- range .Values.onepanel_admin_users }}
        {{ .login }}:
          password: {{ .password }}
          userRole: admin
        {{- end }}
        {{- range .Values.onepanel_users }}
        {{ .login }}:
          password: {{ .password }}
          userRole: regular
        {{- end }}
    {{- end }}